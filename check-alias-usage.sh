#!/bin/bash

# =======================================================================
# üîß JP Visual & Docs :: PROJECT CLEAN TOOLKIT (STATIC + ALIAS + AUTO DELETE)
# =======================================================================
# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö static assets ‡πÅ‡∏•‡∏∞ TypeScript aliases ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
# üß† ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö dynamic path, alias, ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û, SVG, ‡πÑ‡∏ü‡∏•‡πå script ‡∏ï‡πà‡∏≤‡∏á ‡πÜ
# üóëÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå auto ‡∏•‡∏ö static asset ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ (‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö)
# üì¶ ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Termux, macOS, Linux shell ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
# üîÅ ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö production config
#
# Usage: ./clean-project.sh [--auto-delete]
# --auto-delete: ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå static ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏≤‡∏° (‡∏£‡∏∞‡∏ß‡∏±‡∏á)

# === CONFIG ===
SRC_DIR="./src"
TSCONFIG="tsconfig.json"
BACKUP_FILE="${TSCONFIG}.bak.$(date +%s)"
ASSET_DIRS=("public/assets" "public/images" "src/assets")
TMP_FILE="$(mktemp)"
AUTO_DELETE=false

# Check arg
if [[ "$1" == "--auto-delete" ]]; then
  AUTO_DELETE=true
fi

echo ""
echo "üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå :: JP Visual & Docs"
echo "üìÇ Source Path: $SRC_DIR"
echo "üóÇÔ∏è  tsconfig: $TSCONFIG"
echo "üíæ Backup tsconfig: $BACKUP_FILE"
echo "üñºÔ∏è Asset Dirs: ${ASSET_DIRS[*]}"
echo "----------------------------------------------------------"

# === 1. CLEAN UNUSED STATIC FILES (‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ + ‡∏•‡∏ö‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ===
echo -e "\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ static asset ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ..."
UNUSED_FILES=()

for DIR in "${ASSET_DIRS[@]}"; do
  if [ -d "$DIR" ]; then
    echo "üìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö $DIR"
    while IFS= read -r -d '' FILE; do
      FILENAME=$(basename "$FILE")
      # search src and public HTML/MD/JSON/TS/JS files
      MATCH_COUNT=$(grep -r --include="*.ts*" --include="*.js*" --include="*.html" --include="*.md" --include="*.json" "$FILENAME" "$SRC_DIR" 2>/dev/null | wc -l)
      if [ "$MATCH_COUNT" -eq 0 ]; then
        UNUSED_FILES+=("$FILE")
        echo "‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ: $FILE"
      fi
    done < <(find "$DIR" -type f -print0)
  else
    echo "‚ö†Ô∏è  ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: $DIR"
  fi
done

if [ ${#UNUSED_FILES[@]} -gt 0 ]; then
  if [ "$AUTO_DELETE" = true ]; then
    echo -e "\nüóëÔ∏è Auto-delete enabled: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå static ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î..."
    for f in "${UNUSED_FILES[@]}"; do
      rm -f "$f" && echo "   ‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß: $f"
    done
  else
    echo -e "\n‚ùó ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå static ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N)"
    read -r answer
    if [[ "$answer" =~ ^[Yy]$ ]]; then
      for f in "${UNUSED_FILES[@]}"; do
        rm -f "$f" && echo "   ‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß: $f"
      done
    else
      echo "üö´ ‡πÑ‡∏°‡πà‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå static ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ"
    fi
  fi
else
  echo "‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö static asset ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
fi

# === 2. CHECK + REMOVE UNUSED ALIASES ===
echo -e "\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö alias ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô tsconfig.json..."
ALIASES=$(jq -r '.compilerOptions.paths | keys[]' "$TSCONFIG" | sed 's/\/\*$//' | sort)

if [ -z "$ALIASES" ]; then
  echo "‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö alias ‡πÉ‡∏î ‡πÜ ‡πÉ‡∏ô $TSCONFIG"
  exit 1
fi

USED_ALIASES=()
UNUSED_ALIASES=()

for alias in $ALIASES; do
  escaped_alias=$(printf "%s" "$alias" | sed 's/[]\/$*.^[]/\\&/g')
  count=$(grep -rE "from ['\"]$escaped_alias" "$SRC_DIR" --include="*.ts*" --include="*.tsx" --include="*.js*" --include="*.jsx" 2>/dev/null | wc -l)
  if [ "$count" -eq 0 ]; then
    UNUSED_ALIASES+=("$alias")
    printf "‚ùå %-20s ‚Üí unused\n" "$alias"
  else
    USED_ALIASES+=("$alias")
    printf "‚úÖ %-20s ‚Üí used (%d time%s)\n" "$alias" "$count" "$(test "$count" -gt 1 && echo "s")"
  fi
done

# === 3. BACKUP + REMOVE UNUSED ALIASES ===
cp "$TSCONFIG" "$BACKUP_FILE"

if [ ${#UNUSED_ALIASES[@]} -eq 0 ]; then
  echo -e "\n‚úÖ ‡∏ó‡∏∏‡∏Å alias ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö"
else
  echo -e "\nüßΩ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö alias ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å tsconfig.json..."
  jq --argjson unused "$(printf '%s\n' "${UNUSED_ALIASES[@]}" | jq -R . | jq -s .)" '
    .compilerOptions.paths |= with_entries(
      select((.key | sub("/\\*$"; "")) as $k |
        ($unused | index($k) | not)
      )
    )
  ' "$TSCONFIG" > "$TMP_FILE" && mv "$TMP_FILE" "$TSCONFIG"

  echo "‚úÖ ‡∏•‡∏ö alias ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${#UNUSED_ALIASES[@]} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:"
  for alias in "${UNUSED_ALIASES[@]}"; do
    echo "   üóëÔ∏è  $alias"
  done
fi

# === DONE ===
echo -e "\nüéØ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô :: ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
echo "üì¶ tsconfig.json ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: $BACKUP_FILE"
echo "----------------------------------------------------------"