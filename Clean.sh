#!/bin/bash
set -euo pipefail

# üé® ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
GREEN='\033[0;32m'
RED='\033[0;31m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m' # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏µ

# üß® ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÅ‡∏•‡∏∞ ctrl+c
trap "echo -e '\n${RED}üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å!${NC}'; exit 1" ERR INT

# üìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å root ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
if [ ! -f "package.json" ]; then
  echo -e "${RED}‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏à‡∏≤‡∏Å root ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (‡∏ó‡∏µ‡πà‡∏°‡∏µ package.json)${NC}"
  exit 1
fi

echo -e "${CYAN}üßº ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå...${NC}"

# ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å argument
SKIP_INSTALL=false
SKIP_DEV=false
FORCE=false
INCLUDE_ENV=false
INCLUDE_LOG=false

for arg in "$@"; do
  case $arg in
    --skip-install) SKIP_INSTALL=true ;;
    --skip-dev) SKIP_DEV=true ;;
    --force) FORCE=true ;;
    --env) INCLUDE_ENV=true ;;
    --logs) INCLUDE_LOG=true ;;
  esac
done

# üî• ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
if [ "$FORCE" = false ]; then
  echo -e "${YELLOW}‚ö†Ô∏è  ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏à‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:"
  echo -e "   - node_modules, dist/, .vite/, .next/, .turbo/, .vercel/"
  echo -e "   - lock files ‡πÅ‡∏•‡∏∞ cache ‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
  [ "$INCLUDE_ENV" = true ] && echo -e "   - .env ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå .env.*"
  [ "$INCLUDE_LOG" = true ] && echo -e "   - *.log, report.html"
  read -r -p "${YELLOW}‚ö†Ô∏è  ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ${NC}" confirm
  case "$confirm" in
    [yY]) ;;
    *) echo -e "${RED}‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô${NC}" ; exit 0 ;;
  esac
fi

# üî• ‡∏•‡∏ö dependencies ‡πÅ‡∏•‡∏∞ build outputs
echo -e "${GREEN}üì¶ ‡∏•‡∏ö node_modules/...${NC}"
rm -rf node_modules

echo -e "${GREEN}üîí ‡∏•‡∏ö lock files...${NC}"
rm -f pnpm-lock.yaml yarn.lock package-lock.json

echo -e "${GREEN}üóëÔ∏è ‡∏•‡∏ö output folders (dist, .vite, .next, .turbo, .vercel)...${NC}"
rm -rf dist .vite .next .turbo .vercel build

echo -e "${GREEN}üìÇ ‡∏•‡∏ö cache ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô .tsbuildinfo ...${NC}"
find . -type f -name '*.tsbuildinfo' -delete

# üîê ‡∏•‡∏ö .env ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏
if [ "$INCLUDE_ENV" = true ]; then
  echo -e "${GREEN}üß™ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå .env ‡πÅ‡∏•‡∏∞ .env.* ...${NC}"
  find . -type f -name ".env*" -delete
fi

# üìã ‡∏•‡∏ö logs ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏
if [ "$INCLUDE_LOG" = true ]; then
  echo -e "${GREEN}üìã ‡∏•‡∏ö log files (*.log, report.html)...${NC}"
  find . -type f \( -name "*.log" -o -name "report.html" \) -delete
fi

# üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡πÉ‡∏´‡∏°‡πà
if [ "$SKIP_INSTALL" = false ]; then
  echo -e "${CYAN}üì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö pnpm...${NC}"
  if ! command -v pnpm &> /dev/null; then
    echo -e "${RED}‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö pnpm! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô: npm install -g pnpm${NC}"
    exit 1
  fi

  echo -e "${GREEN}üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ pnpm...${NC}"
  pnpm install
else
  echo -e "${YELLOW}‚è© ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies (--skip-install)${NC}"
fi

# üöÄ ‡∏£‡∏±‡∏ô dev server
if [ "$SKIP_DEV" = false ]; then
  echo -e "${GREEN}üöÄ ‡∏£‡∏±‡∏ô dev server...${NC}"
  pnpm run dev
else
  echo -e "${YELLOW}‚è© ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ô dev server (--skip-dev)${NC}"
fi

echo -e "${GREEN}‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!${NC}"