// src/components/AdminBoard/Dashboard.tsx

import React, { useEffect, useState } from 'react'
import CustomerCard from '../CustomerCard'
import StatsPanel from './StatsPanel'
import UserTable from './UserTable'
import { CustomerApproval } from '@/data/approvedCustomers'

const Dashboard: React.FC = () => {
  const [customers, setCustomers] = useState<CustomerApproval[]>([])
  const [loading, setLoading] = useState(true)

  // Mock fetching approved customers (replace with real API call if available)
  useEffect(() => {
    const fetchCustomers = async () => {
      try {
        setLoading(true)
        // Simulate fetch delay
        await new Promise((res) => setTimeout(res, 800))
        // Sample static data or import from '@/data/approvedCustomers'
        // Replace this with actual API logic if needed
        const data: CustomerApproval[] = [
          {
            id: '1',
            name: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ A',
            status: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå',
            documentTitle: '‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤',
            receivedDate: '2025-07-21',
          },
          {
            id: '2',
            name: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ B',
            status: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
            documentTitle: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤',
            receivedDate: '2025-07-19',
          },
          {
            id: '3',
            name: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ C',
            status: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß',
            documentTitle: '',
            receivedDate: '2025-07-18',
          },
        ]
        setCustomers(data)
      } catch (error) {
        console.error('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error)
      } finally {
        setLoading(false)
      }
    }
    fetchCustomers()
  }, [])

  // Sample stats for StatsPanel
  const stats = [
    { label: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', value: customers.length, icon: 'üë•' },
    {
      label: '‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå',
      value: customers.filter((c) => c.status === '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå').length,
      icon: '‚úÖ',
    },
    {
      label: '‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
      value: customers.filter((c) => c.status === '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£').length,
      icon: '‚è≥',
    },
  ]

  return (
    <div className="flex flex-col gap-8">
      <StatsPanel stats={stats} />

      <section>
        <h2 className="text-xl font-semibold mb-4">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {loading
            ? Array.from({ length: 3 }).map((_, i) => (
                <CustomerCard key={i} loading />
              ))
            : customers.map((customer) => (
                <CustomerCard key={customer.id} customer={customer} />
              ))}
        </div>
      </section>

      <section>
        <h2 className="text-xl font-semibold mb-4">‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h2>
        <UserTable />
      </section>
    </div>
  )
}

export default Dashboard