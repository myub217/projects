// src/components/AdminBoard/widgets/CertificateExporter.tsx
// ‚úÖ ‡∏õ‡∏∏‡πà‡∏° export PDF ‡∏à‡∏≤‡∏Å CertificatePreview ‡∏û‡∏£‡πâ‡∏≠‡∏° handle ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

import React from 'react'
import { toPng } from 'html-to-image'
import jsPDF from 'jspdf'
import toast from 'react-hot-toast'

interface CertificateExporterProps {
  targetId: string // ID ‡∏Ç‡∏≠‡∏á element ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ export
  filename?: string
}

const CertificateExporter: React.FC<CertificateExporterProps> = ({
  targetId,
  filename = 'certificate.pdf',
}) => {
  const handleExport = async () => {
    const element = document.getElementById(targetId)
    if (!element) {
      toast.error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á')
      return
    }

    try {
      const dataUrl = await toPng(element, { cacheBust: true })
      const pdf = new jsPDF('p', 'mm', 'a4')
      const pdfWidth = pdf.internal.pageSize.getWidth()
      const imgProps = pdf.getImageProperties(dataUrl)
      const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width

      pdf.addImage(dataUrl, 'PNG', 0, 0, pdfWidth, pdfHeight)
      pdf.save(filename)
      toast.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
    } catch (error) {
      console.error('Export PDF error:', error)
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞ export PDF')
    }
  }

  return React.createElement(
    'button',
    {
      onClick: handleExport,
      className: 'btn btn-primary',
      'aria-label': '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô PDF',
      type: 'button',
    },
    'üìÑ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å PDF'
  )
}

export default CertificateExporter
