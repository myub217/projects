--- vite.config.mjs ---
// vite.config.mjs
import { defineConfig, loadEnv } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import { visualizer } from "rollup-plugin-visualizer";
import history from "connect-history-api-fallback";
import fs from "fs";
import { VitePWA } from "vite-plugin-pwa";

export default defineConfig(({ mode, command }) => {
  const env = loadEnv(mode, process.cwd(), "");

  const isDev = mode === "development";
  const isBuild = command === "build";

  const defineEnv = Object.fromEntries(
    Object.entries(env)
      .filter(([key]) => key.startsWith("VITE_"))
      .map(([key, val]) => [`process.env.${key}`, JSON.stringify(val)])
  );

  const base = env.VITE_BASE_URL?.trim() || "/";
  const outDir = env.VITE_BUILD_OUTDIR?.trim() || "dist";
  const devPort = Number(env.VITE_DEV_SERVER_PORT) || 5173;
  const previewPort = Number(env.VITE_PREVIEW_SERVER_PORT) || 4173;
  const openBrowser = env.VITE_OPEN_BROWSER === "true";
  const openReport = env.VITE_OPEN_REPORT === "true";

  return {
    base,

    plugins: [
      react(),
      VitePWA({
        registerType: "autoUpdate",
        injectRegister: "script",
        devOptions: {
          enabled: isDev,
        },
        manifest: {
          name: "Modular Onepage App",
          short_name: "ModularOne",
          start_url: base,
          display: "standalone",
          background_color: "#ffffff",
          theme_color: "#0f172a",
          icons: [
            {
              src: "/icons/icon-192x192.png",
              sizes: "192x192",
              type: "image/png",
            },
            {
              src: "/icons/icon-512x512.png",
              sizes: "512x512",
              type: "image/png",
            },
          ],
        },
      }),
      isBuild &&
        visualizer({
          filename: `${outDir}/report.html`,
          open: openReport,
          gzipSize: true,
          brotliSize: true,
          template: "sunburst",
        }),
      // @rollup/plugin-strip ถูกถอดออก เพราะไม่มีใน dependencies แล้ว
    ].filter(Boolean),

    resolve: {
      alias: {
        "@": path.resolve(__dirname, "src"),
      },
    },

    define: defineEnv,

    server: {
      port: devPort,
      open: openBrowser,
      fs: {
        allow: ["."],
      },
      middlewareMode: false,
      configureServer(server) {
        server.middlewares.use(history());
      },
    },

    preview: {
      port: previewPort,
      open: openBrowser,
    },

    build: {
      outDir,
      sourcemap: true,
      assetsInlineLimit: 4096,
      preloadModules: true,
      rollupOptions: {
        output: {
          entryFileNames: "assets/[name]-[hash].js",
          chunkFileNames: "assets/[name]-[hash].js",
          assetFileNames: "assets/[name]-[hash][extname]",
          manualChunks(id) {
            if (id.includes("node_modules")) {
              if (id.includes("react")) return "vendor-react";
              if (id.includes("framer-motion")) return "vendor-framer";
              if (id.includes("tailwindcss")) return "vendor-tailwind";
              return "vendor";
            }
          },
        },
      },
    },

    optimizeDeps: {
      include: [
        "react",
        "react-dom",
        "react-router-dom",
        "framer-motion",
      ],
    },

    css: {
      devSourcemap: true,
    },
  };
});--- tsconfig.json ---
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Modular Onepage Project",

  "compilerOptions": {
    "target": "ES2022",
    "module": "ESNext",
    "lib": ["DOM", "DOM.Iterable", "ES2022"],
    "moduleResolution": "bundler",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "resolveJsonModule": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true,
    "strict": true,
    "noFallthroughCasesInSwitch": true,

    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    },

    "jsx": "react-jsx",
    "types": ["vite/client", "jest", "jest-fetch-mock"]
  },

  "include": [
    "src",
    "vite.config.mjs",
    "tailwind.config.mjs",
    "eslint.config.js",
    "jest.setup.ts"
  ],
  "exclude": ["node_modules", "dist", "coverage"],

  "ts-node": {
    "esm": true,
    "experimentalSpecifierResolution": "node",
    "compilerOptions": {
      "module": "ESNext",
      "target": "ES2022"
    }
  }
}--- jest.config.js ---
/** @type {import('jest').Config} */
const config = {
  displayName: 'modular-onepage',

  testEnvironment: 'jsdom',
  testEnvironmentOptions: {
    resources: 'usable',
  },

  roots: ['<rootDir>/src'],
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json'],

  transform: {
    '^.+\\.(ts|tsx|js|jsx)$': 'ts-jest',
  },

  setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],

  testMatch: ['**/__tests__/**/*.(spec|test).(ts|tsx|js)'],

  testPathIgnorePatterns: [
    '/node_modules/',
    '/dist/',
    '/coverage/',
    '/build/',
  ],

  collectCoverage: true,
  coverageDirectory: '<rootDir>/coverage',
  coverageReporters: ['text-summary', 'lcov', 'json'],
  coveragePathIgnorePatterns: [
    '/node_modules/',
    '/__tests__/',
    '/mocks/',
    '/types/',
    'setupTests.ts',
    'test-utils.tsx',
  ],

  globals: {
    'ts-jest': {
      tsconfig: 'tsconfig.json',
      isolatedModules: true,
    },
  },

  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
    '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
    '\\.(jpg|jpeg|png|gif|webp|svg)$': '<rootDir>/__mocks__/fileMock.js',
  },

  resetMocks: true,
  clearMocks: true,
  restoreMocks: true,

  verbose: true,
};

module.exports = config;